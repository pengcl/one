import { FileLikeObject } from './file-like-object.class';
import { Uploader } from './uploader.class';
import { ParsedResponseHeaders } from './interface';
import { UploaderOptions } from './uploader.options';
/**
 * 文件对象
 */
export declare class FileItem {
    /**
     * 文件ID，每个对象具有唯一ID，与文件名无关
     */
    id: string;
    /**
     * 重建文件结构对象
     */
    file: FileLikeObject;
    /**
     * 原生对象
     */
    _file: File;
    /**
     * 索引
     */
    index: number;
    /**
     * 上传进度
     */
    progress: number;
    /**
     * 准备上传就绪
     */
    isReady: boolean;
    /**
     * 上传中
     */
    isUploading: boolean;
    /**
     * 已上传（不管错误与否都是true）
     */
    isUploaded: boolean;
    /**
     * 上传成功
     */
    isSuccess: boolean;
    /**
     * 用户取消上传
     */
    isCancel: boolean;
    /**
     * 上传失败
     */
    isError: boolean;
    /**
     * HTTP请求对象
     */
    _xhr: XMLHttpRequest;
    /**
     * 上传配置信息
     */
    options: UploaderOptions;
    protected uploader: Uploader;
    constructor(uploader: Uploader, file: File, options: UploaderOptions);
    setOptions(options: UploaderOptions): void;
    /**
     * 上传
     */
    upload(): void;
    /**
     * 取消上传
     */
    cancel(): void;
    /**
     * 从队列中移除，当文件正在上传中时会先取消
     */
    remove(): void;
    _prepareToUploading(): void;
    _onBeforeUpload(): void;
    _onProgress(progress: number): any;
    _onSuccess(response: string, status: number, headers: ParsedResponseHeaders): void;
    _onError(response: string, status: number, headers: ParsedResponseHeaders): void;
    _onComplete(response: string, status: number, headers: ParsedResponseHeaders): void;
    _onCancel(response: string, status: number, headers: ParsedResponseHeaders): any;
}
