import { UploaderOptions, FilterFunction } from './uploader.options';
import { FileItem } from './file-item.class';
import { UploaderConfig } from './uploader.config';
import { ParsedResponseHeaders } from './interface';
/**
 * 内置HTML5上传组件
 */
export declare class Uploader {
    private globalConfig;
    private _options;
    private _queue;
    private _progress;
    private _isUploading;
    private _nextIndex;
    private _failFilterIndex;
    /**
     * 获取当前上传组件配置项
     */
    readonly options: UploaderOptions;
    /**
     * 获取队列中所有文件对象
     */
    readonly queue: FileItem[];
    /**
     * 获取当前总进度
     */
    readonly progress: number;
    /**
     * 是否上传中
     */
    readonly isUploading: boolean;
    /**
     * 获取未上传数量
     */
    readonly notUploadedCount: number;
    /**
     * 获取已上传数量
     */
    readonly uploadedCount: number;
    _getNextIndex(): number;
    /**
     * Creates an instance of Uploader.
     */
    constructor(options?: UploaderOptions, globalConfig?: UploaderConfig);
    /**
     * 重置选项
     *
     * @param options
     * @param includeOldQueue 是否包括已存在队列中的文件
     */
    setOptions(options: UploaderOptions, includeOldQueue?: boolean): void;
    private _queueLimitFilter();
    private _fileSizeFilter(item);
    private _mimeTypeFilter(item);
    private _fileTypeFilter(item);
    private _isValidFile(file, filters, options);
    /** 过滤器，如果未指定采用内置 */
    private _getFilters(filters);
    private _getIndexOfItem(value);
    /** 获取未上传过列表 */
    private getNotUploadedItems();
    /** 获取待上传文件 */
    readonly getReadyItems: FileItem[];
    /**
     * 将文件放入队列中
     *
     * @param files 文件列表
     * @param options 强制重新指定新 `options` 内容
     * @param filters 强制重新指定新 `filters` 内容
     */
    addToQueue(files: File[], options?: UploaderOptions, filters?: FilterFunction[] | string): void;
    /**
     * 从队列中移除一个文件
     *
     * @param value FileItem对象或下标
     */
    removeFromQueue(value: FileItem | Number): void;
    /**
     * 清空队列
     */
    clearQueue(): void;
    /**
     * 上传某个文件
     */
    uploadItem(value: FileItem): void;
    /**
     * 取消某个文件
     */
    cancelItem(value: FileItem): void;
    /**
     * 上传队列中所有未上传的文件
     */
    uploadAll(): void;
    /**
     * 取消所有上传中文件
     */
    cancelAll(): void;
    _destroy(): void;
    private _xhrTransport(item);
    private _getTotalProgress(value?);
    private _parseHeaders(headers);
    private _transformResponse(response, headers);
    private _isSuccessCode(status);
    private _onProgressItem(item, progress);
    _onErrorItem(item: FileItem, response: string, status: number, headers: ParsedResponseHeaders): void;
    private _onSuccessItem(item, response, status, headers);
    private _onCancelItem(item, response, status, headers);
    _onCompleteItem(item: FileItem, response: string, status: number, headers: ParsedResponseHeaders): void;
}
