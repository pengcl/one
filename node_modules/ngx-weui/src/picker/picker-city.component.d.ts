import { EventEmitter, OnDestroy } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { PickerOptions } from './options';
import { PickerComponent } from './picker.component';
/**
 * 城市选择器（并不包含城市数据，可以参考示例中的数据格式）
 */
export declare class CityPickerComponent implements ControlValueAccessor, OnDestroy {
    _pickerInstance: PickerComponent;
    _value: string;
    _groups: any[];
    _selected: number[];
    private _tmpData;
    dataMap: {
        label: string;
        value: string;
        items: string;
    };
    /** 城市数据，可以参考示例中的数据格式 */
    data: any;
    /** 配置项 */
    options: PickerOptions;
    /** 当options.type=='form'时，占位符文本 */
    placeholder: string;
    disabled: boolean;
    /**
     * 确认后回调当前选择数据（包括已选面板所有数据）
     *
     * `{ value: '10000', items: [ {}, {}, {} ] }`
     */
    change: EventEmitter<any>;
    /** 列变更时回调 */
    groupChange: EventEmitter<any>;
    /** 取消后回调 */
    cancel: EventEmitter<any>;
    /** 显示时回调 */
    show: EventEmitter<any>;
    /** 隐藏后回调 */
    hide: EventEmitter<any>;
    ngOnDestroy(): void;
    private parseData(data, subKey, selected?, group?, newselected?);
    /**
     * 将值转换成位置
     */
    private valueToSelect(data, subKey, dept?, newSelected?);
    _onCityChange(data: any): void;
    _onCityGroupChange(res: any): void;
    _onCityCancelChange(): void;
    /** 服务于Service，并无实际意义 */
    _triggerShow(): void;
    _onShow(): void;
    _onHide(): void;
    writeValue(value: any): void;
    private onChange;
    private onTouched;
    registerOnChange(fn: (_: any) => {}): void;
    registerOnTouched(fn: () => {}): void;
    setDisabledState(isDisabled: boolean): void;
}
