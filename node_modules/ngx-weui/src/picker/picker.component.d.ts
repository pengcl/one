import { OnDestroy, OnChanges, SimpleChanges, EventEmitter, ElementRef, OnInit } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { PickerData } from './data';
import { PickerOptions } from './options';
import { PickerConfig } from './picker.config';
export declare class PickerComponent implements ControlValueAccessor, OnInit, OnDestroy, OnChanges {
    private el;
    private DEF;
    /** 配置项 */
    options: PickerOptions;
    _value: any;
    _selected: any[];
    _groups: PickerData[][];
    /**
     * 当前默认位置，数组的长度必须等同于 groups 长度
     */
    defaultSelect: number[];
    /**
     * 多列数据，以数组的长度来决定几列数据
     * 支持string[]单列数组，单纯只是为了方便
     */
    groups: PickerData[][] | String[];
    _text: string;
    /** 当 `options.type==='form'` 时，占位符文本 */
    placeholder: string;
    disabled: boolean;
    /**
     * 确认后回调当前选择数据（包括已选面板所有数据）
     *
     * `{ value: '10000', items: [ {}, {}, {} ] }`
     */
    change: EventEmitter<any>;
    /** 列变更时回调 */
    groupChange: EventEmitter<any>;
    /** 取消后回调 */
    cancel: EventEmitter<{}>;
    /** 显示时回调 */
    show: EventEmitter<{}>;
    /** 隐藏后回调 */
    hide: EventEmitter<{}>;
    constructor(el: ElementRef, DEF: PickerConfig);
    ngOnInit(): void;
    _showP: boolean;
    _shown: boolean;
    _onHide(fh: boolean): false | this;
    _onShow(): false | this;
    private parseOptions();
    private getSelecteItem();
    _setText(res?: any[]): this;
    _setDefault(): this;
    _onGroupChange(data: any, groupIndex: number): void;
    _onCancel(): boolean;
    _onConfirm(): boolean;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    writeValue(value: any): void;
    private onChange;
    private onTouched;
    registerOnChange(fn: (_: any) => {}): void;
    registerOnTouched(fn: () => {}): void;
    setDisabledState(isDisabled: boolean): void;
    _onFocus($event: FocusEvent): void;
}
